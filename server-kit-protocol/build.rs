use std::{
    env, fs,
    path::{Path, PathBuf},
};

// use protobuf_codegen::Customize;

fn out_dir() -> PathBuf {
    Path::new(&env::var("OUT_DIR").expect("env")).join("proto")
}

fn cleanup() {
    let _ = fs::remove_dir_all(&out_dir());
}

fn compile() {
    let out_dir = out_dir();
    fs::create_dir(&out_dir).expect("create output directory");

    let schema_dir = Path::new(&env::var("CARGO_MANIFEST_DIR").expect("env")).join("proto");

    let pb_files: Vec<PathBuf> = glob::glob(&schema_dir.join("**/*.proto").to_string_lossy())
        .expect("glob")
        .filter_map(|p| p.ok())
        .collect();
    let pb_files: Vec<&Path> = pb_files.iter().map(PathBuf::as_path).collect();

    protobuf_codegen::Codegen::new()
        .pure()
        .inputs(pb_files)
        .include(schema_dir)
        .out_dir(&out_dir)
        // .customize(Customize {
        //     // carllerche_bytes_for_bytes: Some(true),
        //     ..Default::default()
        // })
        .run_from_script();
}

fn generate_mod_rs() {
    let out_dir = out_dir();
    let mod_rs = out_dir.join("mod.rs");
    // delete mod.rs generated by protobuf-gen which doesn't contain mod generated by flatc
    fs::remove_file(&mod_rs).expect("remove mod.rs");

    let mods = glob::glob(&out_dir.join("*.rs").to_string_lossy())
        .expect("glob")
        .filter_map(|p| {
            p.ok()
                .map(|p| format!("pub mod {};", p.file_stem().unwrap().to_string_lossy()))
        })
        .collect::<Vec<_>>()
        .join("\n");

    fs::write(&mod_rs, format!("// @generated\n{}\n", mods)).expect("write");
    println!("cargo:rustc-env=SCHEMA_MOD_RS={}", mod_rs.to_string_lossy());
}

fn main() {
    // Tell Cargo that if the given file changes, to rerun this build script.
    println!("cargo:rerun-if-changed=proto");
    println!("cargo:rerun-if-changed=proto/brpc");
    println!("cargo:rerun-if-changed=proto/brpc/baidu_rpc_meta.proto");
    println!("cargo:rerun-if-changed=proto/brpc/options.proto");
    println!("cargo:rerun-if-changed=proto/brpc/streaming_rpc_meta.proto");

    cleanup();
    compile();
    generate_mod_rs();
}
